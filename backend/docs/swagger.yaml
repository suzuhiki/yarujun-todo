basePath: /api/v1
definitions:
  types.CreateAccountRequest:
    properties:
      name:
        example: taro
        type: string
      password:
        example: tarodesu
        type: string
    required:
    - name
    - password
    type: object
  types.CreateAccountResponse:
    properties:
      code:
        example: 200
        type: integer
      name:
        example: test
        type: string
    type: object
  types.CreateTaskRequest:
    properties:
      deadline:
        example: "2024-09-20T03:12:53+09:00"
        type: string
      memo:
        example: 概要
        type: string
      title:
        example: やること
        type: string
      waitlist_num:
        type: integer
    required:
    - title
    type: object
  types.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  types.GetUserIdResponse:
    properties:
      user_id:
        example: "1"
        type: string
    type: object
  types.LoginRequest:
    properties:
      name:
        example: taro
        type: string
      password:
        example: tarodesu
        type: string
    required:
    - name
    - password
    type: object
  types.LoginResponse:
    properties:
      code:
        example: 200
        type: integer
      expier:
        example: "2024-09-20T03:12:53+09:00"
        type: string
      token:
        type: string
    type: object
  types.SuccessResponse:
    properties:
      data: {}
    type: object
  types.TaskEntity:
    properties:
      deadline:
        type: string
      memo:
        type: string
      title:
        type: string
      waitlist_num:
        type: string
    type: object
info:
  contact: {}
  description: このswaggerはyarujunのAPIを定義しています。 JWTトークンの前に"Bearer"を追加してください。
  license:
    name: suzuhiki
  title: gin-swagger todos
  version: "1.0"
paths:
  /auth/current_user:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.GetUserIdResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: 現在のユーザーidを返す
  /auth/refresh_token:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: 認証情報の更新
  /auth/tasks:
    get:
      parameters:
      - description: user_id
        in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/types.TaskEntity'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Todo一覧を配列で返す
    post:
      consumes:
      - application/json
      parameters:
      - description: user_id
        in: query
        name: user_id
        required: true
        type: string
      - description: body param
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/types.CreateTaskRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.CreateTaskRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: タスクを作成する
  /create_account:
    post:
      consumes:
      - application/json
      parameters:
      - description: body param
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/types.CreateAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.CreateAccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: アカウント作成
  /login:
    post:
      consumes:
      - application/json
      parameters:
      - description: body param
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/types.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: ログイン
  /test:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: Hello, World!!!!!!!!
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: hello worldを返す
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
